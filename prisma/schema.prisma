generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  savedApartments   String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  email            String            @unique
  emailVerified    DateTime?
  name             String?
  image            String?
  hashedPassword   String?
  public           Boolean           @default(true)
  friends          Friend[]          @relation("user")
  symmetricFriends Friend[]          @relation("friend")
  accounts         Account[]
  sessions         Session[]
  savedApartments  SavedApartment[]
  searchParameters SearchParameter[]
  userGroups       UserGroup[]       @relation("user")

  @@index([email])
  @@index([id])
  @@map("users")
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    String
  groupId   String
  groupName String
  user      User     @relation("user", fields: [userId], references: [id])
// Need Members here

  @@unique([userId, groupId])
  @@map("user_groups")
}

model Friend {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")
  userId    String
  friendId  String
  status    FriendStatus @default(PENDING)
  user      User         @relation("user", fields: [userId], references: [id])
  friend    User         @relation("friend", fields: [friendId], references: [id])

  @@index([id])
  @@index([userId])
  @@index([friendId])
  @@map("friends")
}

model SearchParameter {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  nickname   String
  address    String
  traveltime String
  travelmode String
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@index([id])
  @@index([userId])
  @@map("search_parameters")
}

model SavedApartment {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  userId      String
  apartmentId String
  user        User      @relation(fields: [userId], references: [id])
  apartment   Apartment @relation(fields: [apartmentId], references: [id])

  @@index([id])
  @@index([userId])
  @@index([apartmentId])
  @@map("saved_apartments")
}

model Apartment {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @default(now()) @map("updated_at")
  apartmentId      String?          @unique
  bathrooms        Int?
  bedrooms         Int?
  price            Int?
  squareFootage    Int?
  county           String?
  propertyType     String?
  addressLine1     String?
  addressLine2     String?
  city             String?
  state            String?
  zipCode          String?
  formattedAddress String?
  lastSeen         String?
  listedDate       String?
  status           String?
  removedDate      String?
  daysOnMarket     Int?
  latitude         Decimal?
  longitude        Decimal?
  lotSize          Int?
  yearBuilt        Int?
  savedApartments  SavedApartment[]

  @@index([id])
  @@map("apartments")
}

enum FriendStatus {
  PENDING
  ACTIVE
}
