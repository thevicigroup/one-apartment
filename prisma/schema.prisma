datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedApartments   String

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  email          String    @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  hashedPassword String?

  public           Boolean  @default(true)
  friends          Friend[] @relation("user")
  // This second "side" of the friends relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly?
  symmetricFriends Friend[] @relation("friend")

  accounts Account[]
  sessions Session[]

  searchParameters SearchParameter[]
  searchApartments SearchApartment[]


  @@index([email])
  @@index([id])
  @@map(name: "users")
}

enum FriendStatus {
  PENDING
  ACTIVE
}

model Friend {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user     User   @relation(name: "user", fields: [userId], references: [id])
  userId   String
  friend   User   @relation(name: "friend", fields: [friendId], references: [id])
  friendId String

  status FriendStatus @default(PENDING)

  @@index([id])
  @@index([userId])
  @@index([friendId])
  @@map(name: "friends")
}

model SearchParameter {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  nickname String
  address  String

  traveltime String
  travelmode String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([id])
  @@index([userId])
  @@map(name: "search_parameters")
}

model SearchApartment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  nickname String
  address  String

  traveltime String
  travelmode String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([id])
  @@index([userId])
  @@map(name: "search_apartments")
}
