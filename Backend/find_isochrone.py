
from constants import *
import json
import requests
from icecream import ic

def find_intersections(user_requirements : dict):
    """ This function serves to use the TravelTime Api to 
    find the intersections between isochrones generated by
    the user input data

    Parameters:
    -----------
        user_requirements : 
            This is a dictionary of all the user(s)'s requirements
            for locations of interest

    Returns:
    --------
        shells : 
            This is a list of all the shells in the intersection isochrone
        holes : 
            This is a list of all the holes in the intersection isocrhone    
    """
    
    headers = {
            'Content-Type':'application/json',
            'Accept':'application/json',
            'X-Application-Id':TRAVEL_TIME_ID,
            'X-Api-Key':TRAVEL_TIME_APPLICATION_KEY
            }

    user_ids = user_requirements['User Ids']
    user_coords = user_requirements['User Coords']
    user_travel_time = user_requirements['User Travel Time']
    user_travel_mode = user_requirements['User Travel Mode']
    departure_searches = {
        user: {
            "id": f"{user_ids[user]}",
            "coords": {
                "lat": user_coords[user][0],
                "lng": user_coords[user][1],
            },
            "departure_time": "2023-06-06T13:00:00.000Z",
            "travel_time": user_travel_time[user],
            "transportation": {"type": f"{user_travel_mode[user]}"},
        }
        for user in range(len(user_ids))
    }

    myobj = {
        "intersections": [{"id": "Intersections", "search_ids": list(user_ids)}],
        "departure_searches": [departure_searches[i] for i in range(len(departure_searches))],
    }

    isochrone = requests.post(TRAVEL_TIME_BASE_URL, headers=headers, json=myobj)
    isochrone = json.loads(isochrone.text)
    intersection = isochrone['results'][0]['shapes']
    shells = [intersection[i]['shell'] for i in range(len(isochrone['results'][0]['shapes']))]
    holes = [intersection[i]['holes'] for i in range(len(isochrone['results'][0]['shapes']))]
    
    return shells, holes

if __name__ == '__main__':


    user_requirements = {
    'User Ids' : ['user_1', 'user_2'],
    'User Coords' : [[42.36, -71.06], [42, -71]],
    'User Travel Time' : [3600, 2000],
    'User Travel Mode' : ['driving', 'driving']
    }

    departure_searches = {}
    shells, holes = find_intersections(user_requirements)
